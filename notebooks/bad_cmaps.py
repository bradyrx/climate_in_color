#!/usr/bin/env python3
"""Contains tools for loading bad colormaps."""
import os
import re
import numpy as np
import glob as glob
import matplotlib.cm as mcm
import matplotlib.colors as mcolors
import proplot as plot
from matplotlib import rcParams
from PIL import Image
lut = rcParams['image.lut']

#------------------------------------------------------------------------------#
# Hardcoded bad maps from matplotlib repo
#------------------------------------------------------------------------------#
_gnu_green = lambda x: x**3
_gnu_red   = lambda x: np.sqrt(x)
_gnu_blue  = lambda x: np.sin(x * 2 * np.pi)
_gnu2_red = lambda x: x / 0.32 - 0.78125
_gnu2_green = lambda x: 2 * x - 0.84
_ocean_red = lambda x: 3 * x - 2
_ocean_green = lambda x: np.abs((3 * x - 1) / 2)
_ocean_blue = lambda x: x
def _gnu2_blue(x):
    ret = np.zeros(len(x))
    m = (x < 0.25)
    ret[m] = 4 * x[m]
    m = (x >= 0.25) & (x < 0.92)
    ret[m] = -2 * x[m] + 1.84
    m = (x >= 0.92)
    ret[m] = x[m] / 0.08 - 11.5
    return ret
_hardcoded_data = {
    'gnuplot':{
        'red':   _gnu_red,
        'green': _gnu_green,
        'blue':  _gnu_blue,
        },
    'gnuplot2':{
        'red':   _gnu2_red,
        'green': _gnu2_green,
        'blue':  _gnu2_blue,
        },
    'ocean': {
        'red':   _ocean_red,
        'green': _ocean_green,
        'blue':  _ocean_blue,
        },
    'jet':{
        'red': ((0., 0, 0), (0.35, 0, 0), (0.66, 1, 1), (0.89, 1, 1), (1, 0.5, 0.5)),
        'green': ((0., 0, 0), (0.125, 0, 0), (0.375, 1, 1), (0.64, 1, 1), (0.91, 0, 0), (1, 0, 0)),
        'blue':  ((0., 0.5, 0.5), (0.11, 1, 1), (0.34, 1, 1), (0.65, 0, 0), (1, 0, 0))
        },
    'hot':{
        'red': ((0., 0.0416, 0.0416), (0.365079, 1.000000, 1.000000), (1.0, 1.0, 1.0)),
        'green': ((0., 0., 0.), (0.365079, 0.000000, 0.000000), (0.746032, 1.000000, 1.000000), (1.0, 1.0, 1.0)),
        'blue':  ((0., 0., 0.), (0.746032, 0.000000, 0.000000), (1.0, 1.0, 1.0))
        },
    'hsv':{
        'red': ((0., 1., 1.),
                (0.158730, 1.000000, 1.000000),
                (0.174603, 0.968750, 0.968750),
                (0.333333, 0.031250, 0.031250),
                (0.349206, 0.000000, 0.000000),
                (0.666667, 0.000000, 0.000000),
                (0.682540, 0.031250, 0.031250),
                (0.841270, 0.968750, 0.968750),
                (0.857143, 1.000000, 1.000000),
                (1.0, 1.0, 1.0)),
        'green': ((0., 0., 0.),
                (0.158730, 0.937500, 0.937500),
                (0.174603, 1.000000, 1.000000),
                (0.507937, 1.000000, 1.000000),
                (0.666667, 0.062500, 0.062500),
                (0.682540, 0.000000, 0.000000),
                (1.0, 0., 0.)),
        'blue': ((0., 0., 0.),
                (0.333333, 0.000000, 0.000000),
                (0.349206, 0.062500, 0.062500),
                (0.507937, 1.000000, 1.000000),
                (0.841270, 1.000000, 1.000000),
                (0.857143, 0.937500, 0.937500),
                (1.0, 0.09375, 0.09375))
        },
    'nipy_spectral':{
        'red': [(0.0, 0.0, 0.0), (0.05, 0.4667, 0.4667),
                (0.10, 0.5333, 0.5333), (0.15, 0.0, 0.0),
                (0.20, 0.0, 0.0), (0.25, 0.0, 0.0),
                (0.30, 0.0, 0.0), (0.35, 0.0, 0.0),
                (0.40, 0.0, 0.0), (0.45, 0.0, 0.0),
                (0.50, 0.0, 0.0), (0.55, 0.0, 0.0),
                (0.60, 0.0, 0.0), (0.65, 0.7333, 0.7333),
                (0.70, 0.9333, 0.9333), (0.75, 1.0, 1.0),
                (0.80, 1.0, 1.0), (0.85, 1.0, 1.0),
                (0.90, 0.8667, 0.8667), (0.95, 0.80, 0.80),
                (1.0, 0.80, 0.80)],
        'green': [(0.0, 0.0, 0.0), (0.05, 0.0, 0.0),
                (0.10, 0.0, 0.0), (0.15, 0.0, 0.0),
                (0.20, 0.0, 0.0), (0.25, 0.4667, 0.4667),
                (0.30, 0.6000, 0.6000), (0.35, 0.6667, 0.6667),
                (0.40, 0.6667, 0.6667), (0.45, 0.6000, 0.6000),
                (0.50, 0.7333, 0.7333), (0.55, 0.8667, 0.8667),
                (0.60, 1.0, 1.0), (0.65, 1.0, 1.0),
                (0.70, 0.9333, 0.9333), (0.75, 0.8000, 0.8000),
                (0.80, 0.6000, 0.6000), (0.85, 0.0, 0.0),
                (0.90, 0.0, 0.0), (0.95, 0.0, 0.0),
                (1.0, 0.80, 0.80)],
        'blue': [(0.0, 0.0, 0.0), (0.05, 0.5333, 0.5333),
                (0.10, 0.6000, 0.6000), (0.15, 0.6667, 0.6667),
                (0.20, 0.8667, 0.8667), (0.25, 0.8667, 0.8667),
                (0.30, 0.8667, 0.8667), (0.35, 0.6667, 0.6667),
                (0.40, 0.5333, 0.5333), (0.45, 0.0, 0.0),
                (0.5, 0.0, 0.0), (0.55, 0.0, 0.0),
                (0.60, 0.0, 0.0), (0.65, 0.0, 0.0),
                (0.70, 0.0, 0.0), (0.75, 0.0, 0.0),
                (0.80, 0.0, 0.0), (0.85, 0.0, 0.0),
                (0.90, 0.0, 0.0), (0.95, 0.0, 0.0),
                (1.0, 0.80, 0.80)],
        },
    'gist_rainbow':(
        (0.000, (1.00, 0.00, 0.16)),
        (0.030, (1.00, 0.00, 0.00)),
        (0.215, (1.00, 1.00, 0.00)),
        (0.400, (0.00, 1.00, 0.00)),
        (0.586, (0.00, 1.00, 1.00)),
        (0.770, (0.00, 0.00, 1.00)),
        (0.954, (1.00, 0.00, 1.00)),
        (1.000, (1.00, 0.00, 0.75))
        ),
    'gist_stern':{
        'red': (
            (0.000, 0.000, 0.000),
            (0.0547, 1.000, 1.000),
            (0.250, 0.027, 0.250),  # (0.2500, 0.250, 0.250),
            (1.000, 1.000, 1.000)
            ),
        'green': ((0, 0, 0), (1, 1, 1)),
        'blue': (
            (0.000, 0.000, 0.000),
            (0.500, 1.000, 1.000),
            (0.735, 0.000, 0.000),
            (1.000, 1.000, 1.000)
            )
    },
    'gist_ncar':{
        'red': ((0.0, 0.0, 0.0000),
                (0.3098, 0.0000, 0.0000),
                (0.3725, 0.3993, 0.3993),
                (0.4235, 0.5003, 0.5003),
                (0.5333, 1.0000, 1.0000),
                (0.7922, 1.0000, 1.0000),
                (0.8471, 0.6218, 0.6218),
                (0.8980, 0.9235, 0.9235),
                (1.0000, 0.9961, 0.9961)),
        'green': ((0.0, 0.0, 0.0000),
                (0.0510, 0.3722, 0.3722),
                (0.1059, 0.0000, 0.0000),
                (0.1569, 0.7202, 0.7202),
                (0.1608, 0.7537, 0.7537),
                (0.1647, 0.7752, 0.7752),
                (0.2157, 1.0000, 1.0000),
                (0.2588, 0.9804, 0.9804),
                (0.2706, 0.9804, 0.9804),
                (0.3176, 1.0000, 1.0000),
                (0.3686, 0.8081, 0.8081),
                (0.4275, 1.0000, 1.0000),
                (0.5216, 1.0000, 1.0000),
                (0.6314, 0.7292, 0.7292),
                (0.6863, 0.2796, 0.2796),
                (0.7451, 0.0000, 0.0000),
                (0.7922, 0.0000, 0.0000),
                (0.8431, 0.1753, 0.1753),
                (0.8980, 0.5000, 0.5000),
                (1.0000, 0.9725, 0.9725)),
        'blue': ((0.0, 0.5020, 0.5020),
                (0.0510, 0.0222, 0.0222),
                (0.1098, 1.0000, 1.0000),
                (0.2039, 1.0000, 1.0000),
                (0.2627, 0.6145, 0.6145),
                (0.3216, 0.0000, 0.0000),
                (0.4157, 0.0000, 0.0000),
                (0.4745, 0.2342, 0.2342),
                (0.5333, 0.0000, 0.0000),
                (0.5804, 0.0000, 0.0000),
                (0.6314, 0.0549, 0.0549),
                (0.6902, 0.0000, 0.0000),
                (0.7373, 0.0000, 0.0000),
                (0.7922, 0.9738, 0.9738),
                (0.8000, 1.0000, 1.0000),
                (0.8431, 1.0000, 1.0000),
                (0.8980, 0.9341, 0.9341),
                (1.0000, 0.9961, 0.9961)),
        },
    'gist_earth': {
        'red': (
            (0.0, 0.0, 0.0000),
            (0.2824, 0.1882, 0.1882),
            (0.4588, 0.2714, 0.2714),
            (0.5490, 0.4719, 0.4719),
            (0.6980, 0.7176, 0.7176),
            (0.7882, 0.7553, 0.7553),
            (1.0000, 0.9922, 0.9922),
            ),
        'green': (
            (0.0, 0.0, 0.0000),
            (0.0275, 0.0000, 0.0000),
            (0.1098, 0.1893, 0.1893),
            (0.1647, 0.3035, 0.3035),
            (0.2078, 0.3841, 0.3841),
            (0.2824, 0.5020, 0.5020),
            (0.5216, 0.6397, 0.6397),
            (0.6980, 0.7171, 0.7171),
            (0.7882, 0.6392, 0.6392),
            (0.7922, 0.6413, 0.6413),
            (0.8000, 0.6447, 0.6447),
            (0.8078, 0.6481, 0.6481),
            (0.8157, 0.6549, 0.6549),
            (0.8667, 0.6991, 0.6991),
            (0.8745, 0.7103, 0.7103),
            (0.8824, 0.7216, 0.7216),
            (0.8902, 0.7323, 0.7323),
            (0.8980, 0.7430, 0.7430),
            (0.9412, 0.8275, 0.8275),
            (0.9569, 0.8635, 0.8635),
            (0.9647, 0.8816, 0.8816),
            (0.9961, 0.9733, 0.9733),
            (1.0000, 0.9843, 0.9843),
            ),
        'blue': (
            (0.0, 0.0, 0.0000),
            (0.0039, 0.1684, 0.1684),
            (0.0078, 0.2212, 0.2212),
            (0.0275, 0.4329, 0.4329),
            (0.0314, 0.4549, 0.4549),
            (0.2824, 0.5004, 0.5004),
            (0.4667, 0.2748, 0.2748),
            (0.5451, 0.3205, 0.3205),
            (0.7843, 0.3961, 0.3961),
            (0.8941, 0.6651, 0.6651),
            (1.0000, 0.9843, 0.9843),
            )
        },
    'bwr': ((0.0, 0.0, 1.0), (1.0, 1.0, 1.0), (1.0, 0.0, 0.0)),
    'brg': ((0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (0.0, 1.0, 0.0)),
    'CMRmap': {
        'red':     ((0.000, 0.00, 0.00),
                    (0.125, 0.15, 0.15),
                    (0.250, 0.30, 0.30),
                    (0.375, 0.60, 0.60),
                    (0.500, 1.00, 1.00),
                    (0.625, 0.90, 0.90),
                    (0.750, 0.90, 0.90),
                    (0.875, 0.90, 0.90),
                    (1.000, 1.00, 1.00)),
        'green':  ((0.000, 0.00, 0.00),
                    (0.125, 0.15, 0.15),
                    (0.250, 0.15, 0.15),
                    (0.375, 0.20, 0.20),
                    (0.500, 0.25, 0.25),
                    (0.625, 0.50, 0.50),
                    (0.750, 0.75, 0.75),
                    (0.875, 0.90, 0.90),
                    (1.000, 1.00, 1.00)),
        'blue':   ((0.000, 0.00, 0.00),
                    (0.125, 0.50, 0.50),
                    (0.250, 0.75, 0.75),
                    (0.375, 0.50, 0.50),
                    (0.500, 0.15, 0.15),
                    (0.625, 0.00, 0.00),
                    (0.750, 0.10, 0.10),
                    (0.875, 0.50, 0.50),
                    (1.000, 1.00, 1.00))
        },
    }

#------------------------------------------------------------------------------#
# Maps pulled from papers
#------------------------------------------------------------------------------#
def png2rgb(file):
    """Generates LinearSegmentedColormaps from zoomed-in PNG screenshots of
    colorbars. Use this to load colormap examples you find in the wild."""
    # Load file
    img = Image.open(file)
    data = np.array(img)[...,:3]/255 # drop alpha channel and scale to 0-1
    long = np.argmax(data.shape) # N by M by 4, but which one is smaller?
    nshort = data.shape[1-long]
    vec = np.take(data, nshort//2, axis=1-long)
    # Get unique non-consecutive colors, so we can filter out divider colors
    # Why use lists of tuples? Because don't want axis-wise operations
    # on each channel, want to operate on unique data tuples.
    seen = {*()}
    tuples = [tuple(rgb) for rgb in vec]
    unique = []
    counts = []
    prev = None
    count = 1
    for rgb in tuples:
        if rgb!=prev:
            unique.append(rgb) # name of *current* rgb tuple
            counts.append(count) # number of appeariences for *previous* rgb tuple
            count = 1
        else:
            count += 1
        prev = rgb
    counts = [*counts[1:], count] # shift counts to match rgbs
    # Filter out dividers for colormap images with distinct levels and dividers
    # NOTE: We detect whether image has distinct levels by seeing if the distribution
    # of counts is bimodal! E.g. 1 pixel black, 20 pixels color, 1 pixel black, etc.
    med, mean = np.median(counts), np.mean(counts)
    if abs(mean - med)/med > 5:
        vec = [rgb for rgb,count in zip(unique,counts) if count >= np.mean(counts)]
    return vec

#------------------------------------------------------------------------------#
# Generate colormaps
#------------------------------------------------------------------------------#
def load_cmaps():
    """Returns a list of "bad" colormap names, and registers them."""
    # Iterate through screenshots
    files = sorted(
        glob.glob(os.path.join(os.path.dirname(__file__), '..', 'cmaps', '*.png'))
        )
    screenshot_data = {
        'screenshot' + str(i+1): png2rgb(file)
        for i,file in enumerate(files)
        }
    # Register colormaps and return list
    cmaps = []
    for name,data in {**_hardcoded_data, **screenshot_data}.items():
        if isinstance(data, dict):
            cmap = mcolors.LinearSegmentedColormap(name, data, lut)
        else:
            cmap = mcolors.LinearSegmentedColormap.from_list(name, data, lut)
        mcm.cmap_d[name] = cmap
        cmaps.append(name)
    return cmaps

